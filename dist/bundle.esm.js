import{createRenderer as e,combineRules as r}from"fela";import{renderToMarkup as t,rehydrate as n,render as s}from"fela-dom";import o from"fela-plugin-embedded";import i from"fela-plugin-prefixer";import l from"fela-plugin-fallback-value";import f from"fela-plugin-unit";const u=e=>()=>e,c=e=>e,a=e=>e.replace(/-(\w)/gu,(e,r)=>r.toUpperCase()),p=(()=>{const e=/(}|[^\n]*?\s*([\w-]+)[:\s]+(.*?))([\n;]|{|(?=})|$)/g;return(r,...t)=>{const n={};let s,o=n;return((e,r)=>{const t=e.length;let n="";for(let s=0;s<t;s++)n+=e[s]+(null==r[s]?"":r[s]);return n})(r,t).replace(e,(e,r,t,n,i,l,f)=>{if("{"==i)s=o,o[a(t)]=o={};else if("}"==r){if(!s)throw new Error("Bad rule: "+f);o=s,s=null}else o[a(t)]=isNaN(n)?n.trim():+n;return""}),n}})(),d=(()=>{try{return(e=>"object"==typeof e)(window)}catch{return!1}})(),m={method:"f",defStyles:void 0,plugins:[],enhancers:[],preset:{unit:[]},ssr:!1},h=Object.freeze({f:"function",o:"object",s:"string"}),g=(()=>{const e=(e,r)=>r.split(/[,\s\t]+/g).map(r=>((e,r)=>e?e[r]||e[a(r)]:{})(e,r));return(r,t)=>{switch(typeof t){case h.f:return[t];case h.o:return[u(t)];case h.s:return e(r,t).reduce((e,t)=>(e.push(...g(r,t)),e),[]);default:return[c]}}})();class w{get mixin(){return Object.freeze(this._mixin)}get style(){return t(this.renderer)}constructor(t={}){const{method:u,ssr:c,preset:a,plugins:p,enhancers:w,...y}={...m,...t},b={...m.preset,...a||{}};if(t.fdef)throw new Error("fela-vue: Change deprecated `fdef` to `defStyles`!");this.renderer=e({...y,enhancers:w,plugins:[o(),i(),l(),f(...b.unit),...p]});const{renderer:x}=this,j=t.defStyles;let v,k;switch(typeof j){case h.o:[v,k]=[j.key,j.value];break;case h.f:[v,k]=["fdef",j]}d&&(c?n(x):s(x)),this._mixin={methods:{[u](e,t={}){return x.renderRule(r(...g(this.style,e)),t)}},computed:j?{[v](){return k(this)}}:{}}}}export{w as Renderer,p as css};
