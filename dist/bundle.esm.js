import{createRenderer as e,combineRules as r}from"fela";import{renderToMarkup as t,rehydrate as n,render as s}from"fela-dom";import i from"fela-plugin-embedded";import o from"fela-plugin-prefixer";import l from"fela-plugin-fallback-value";import f from"fela-plugin-unit";const u=e=>()=>e,c=e=>e,a=e=>e.replace(/-(\w)/gu,(e,r)=>r.toUpperCase()),p=(()=>{const e=/([}^\n])*?\s*([\w->*:]+)[:\s]+(.*?)([\n;]|{|(?=})|$)/g;return(r,...t)=>{const n={};let s,i=n;return((e,r)=>{const t=e.length;let n="";for(let s=0;s<t;s++)n+=e[s]+(null==r[s]?"":r[s]);return n})(r,t).replace(e,(e,r,t,n,o,l,f)=>{if("}"==r){if(!s)throw new Error("Bad rule: "+f);i=s,s=null}if("{"==o){s=i;const e={};i[a(t)]=e,i=e}const u=t.includes(":");if(n||u){if(!n&&u){const e=t.split(":");t=e.slice(0,-1).join(":"),n=(e=>e[e.length-1])(e)}else t=t.slice(0,-1);t&&n&&(i[a(t)]=isNaN(n)?n.trim():+n)}return""}),n}})(),d=(()=>{try{return(e=>"object"==typeof e)(window)}catch{return!1}})(),m={method:"f",defStyles:void 0,plugins:[],enhancers:[],preset:{unit:[]},ssr:!1},h=Object.freeze({f:"function",o:"object",s:"string"}),g=(()=>{const e=(e,r)=>r.split(/[,\s\t]+/g).map(r=>((e,r)=>e?e[r]||e[a(r)]:{})(e,r));return(r,t)=>{switch(typeof t){case h.f:return[t];case h.o:return[u(t)];case h.s:return e(r,t).reduce((e,t)=>(e.push(...g(r,t)),e),[]);default:return[c]}}})();class w{get mixin(){return Object.freeze(this._mixin)}get style(){return t(this.renderer)}constructor(t={}){const{method:u,ssr:c,preset:a,plugins:p,enhancers:w,...y}={...m,...t},b={...m.preset,...a||{}};if(t.fdef)throw new Error("fela-vue: Change deprecated `fdef` to `defStyles`!");this.renderer=e({...y,enhancers:w,plugins:[i(),o(),l(),f(...b.unit),...p]});const{renderer:j}=this,x=t.defStyles;let v,k;switch(typeof x){case h.o:[v,k]=[x.key,x.value];break;case h.f:[v,k]=["fdef",x]}d&&(c?n(j):s(j)),this._mixin={methods:{[u](e,t={}){return j.renderRule(r(...g(this.style,e)),t)}},computed:x?{[v](){return k(this)}}:{}}}}export{w as Renderer,p as css};
