import{createRenderer as e}from"fela";import{renderToMarkup as t,rehydrate as r,render as n}from"fela-dom";import s from"fela-plugin-embedded";import i from"fela-plugin-prefixer";import o from"fela-plugin-fallback-value";import f from"fela-plugin-unit";const u=(()=>{try{return(e=>"object"==typeof e)(window)}catch(e){return!1}})(),p={method:"f",defStyles:void 0,plugins:[],preset:{unit:[]},ssr:!1},l=(()=>{const e=e=>()=>e,t=e=>e,r="function",n="object",s="string";return(i,o)=>{switch(typeof o){case r:return[o];case n:return[e(o)];case s:return((e,t)=>t.split(/[,\s\t]+/g).map(t=>((e,t)=>e?e[t]||e[(e=>e.replace(/-(\w)/gu,(e,t)=>t.toUpperCase()))(t)]:{})(e,t)))(i,o).reduce((e,t)=>(e.push(...l(i,t)),e),[]);default:return[t]}}})();class c{get mixin(){return Object.freeze(this._mixin)}get style(){return t(this.renderer)}constructor(t={}){const{method:c,ssr:a,preset:d,plugins:m}=Object.assign({},p,t),g=Object.assign({},p.preset,d||{});if(t.fdef)throw new Error("fela-vue: Change deprecated `fdef` to `defStyles`!");this.renderer=e({plugins:[s(),i(),o(),f(...g.unit),...m]});const{renderer:h}=this,y=t.defStyles;let b,j;y&&([b,j]={object:[y.key,y.value],function:["fdef",y]}[typeof y]),u&&(a?r(h):n(h)),this._mixin={methods:{[c](e,t={}){return l(this.style,e).map(e=>h.renderRule(e,t)).join(" ")}},computed:y?{[b](){return j(this)}}:{}}}}export{c as Renderer};
