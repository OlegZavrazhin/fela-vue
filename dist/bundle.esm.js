import{createRenderer as e,combineRules as t}from"fela";import{renderToMarkup as r,rehydrate as n,render as s}from"fela-dom";import i from"fela-plugin-embedded";import o from"fela-plugin-prefixer";import f from"fela-plugin-fallback-value";import u from"fela-plugin-unit";const c=(()=>{try{return(e=>"object"==typeof e)(window)}catch(e){return!1}})(),l={method:"f",defStyles:void 0,plugins:[],enhancers:[],preset:{unit:[]},ssr:!1},p=(()=>{const e=e=>()=>e,t=e=>e,r="function",n="object",s="string";return(i,o)=>{switch(typeof o){case r:return[o];case n:return[e(o)];case s:return((e,t)=>t.split(/[,\s\t]+/g).map(t=>((e,t)=>e?e[t]||e[(e=>e.replace(/-(\w)/gu,(e,t)=>t.toUpperCase()))(t)]:{})(e,t)))(i,o).reduce((e,t)=>(e.push(...p(i,t)),e),[]);default:return[t]}}})();class a{get mixin(){return Object.freeze(this._mixin)}get style(){return r(this.renderer)}constructor(r={}){const{method:a,ssr:d,preset:m,plugins:h,enhancers:g}=Object.assign({},l,r),y=Object.assign({},l.preset,m||{});if(r.fdef)throw new Error("fela-vue: Change deprecated `fdef` to `defStyles`!");this.renderer=e({enhancers:g,plugins:[i(),o(),f(),u(...y.unit),...h]});const{renderer:b}=this,j=r.defStyles;let w,x;j&&([w,x]={object:[j.key,j.value],function:["fdef",j]}[typeof j]),c&&(d?n(b):s(b)),this._mixin={methods:{[a](e,r={}){return b.renderRule(t(...p(this.style,e)),r)}},computed:j?{[w](){return x(this)}}:{}}}}export{a as Renderer};
